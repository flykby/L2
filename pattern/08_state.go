package pattern

/*
	Реализовать паттерн «состояние».
Объяснить применимость паттерна, его плюсы и минусы, а также реальные примеры использования данного примера на практике.
	https://en.wikipedia.org/wiki/State_pattern

Состояние:
	Поведенческий паттерн, который позволяет обьектам менять поведение взависимости
	от своего состояния. Извне создается впечатление, что изменился целиком весь обьект.
	Основная идея в том, что программа может находится в одном из нескольких состояний,
	которые все время сменяют друг друга. Набор этих состояний и переходов между ними
	всегда имеет окончание. Находясь в разных состояния программа может по разному
	реагировать на одни и теже события.
	Этот паттерн относится к категории паттернов поведения, потому что он решает
	проблемы управления состоянием объекта и его поведением.

Плюсы:
	1) Избавляет от множества больших условных операторов состояний, концентрирует в одном
		месте код, связанный с определенным состоянием
	2) упрощает код контекста
Минусы:
	1) Может неоправданно усложнить код, если состояний мало и они редко меняются
Применяется:
	1) когда поведение объекта зависит от его состояния и должно изменяться во время
		выполнения
	2) когда в коде операций встречаются состоящие из многих ветвей условные операторы,
		в которых выбор ветви зависит от состояния

Реальные пример использования:
	В интернет магазине для отслеживания этапа доставки товара — от состояний "обработка",
	"отправлен", "доставлен" до дополнительных состояний и действий, связанных с заказом


Реализуем процесс сборки страницы с помощью конструктора сайта. У него будет 3 состояния:
	Черновик, Сборка, Добавление
Из Черновика можно отправить страницу на Сборку. Из Сборки в Добавление(к сайту)
Но из Сборки в Добавление перенести страницу может только Сборщик(микросервис по сборке страниц)
*/

import "fmt"

type State interface {
	SaveDraft() error
	BuildPage() error
	AddPage() error
}



type User struct {}

func (c *User) SaveDraft() error {
	fmt.Println("Info: [User] Черновик создан пользователем")
	return nil
}
func (c *User) BuildPage() error {
	fmt.Println("Info: [User] Черновик отправлен на создание")
	return nil
}
func (c *User) AddPage() error {
	return fmt.Errorf("Error: [User] Пользователь не может изменить статус на Добавлено")
}

type Constructor struct {}

func (c *Constructor) SaveDraft() error {
	return fmt.Errorf("Error: [Constructor] Констуктор не может создавать черновик")
}
func (c *Constructor) BuildPage() error {
	return fmt.Errorf("Error: [Constructor] Конструктор не может отправлять черновик на сборку")
}
func (c *Constructor) AddPage() error {
	fmt.Println("Info: [Constructor] Запись опубликована")
	return nil
}


// Контекст, который хранит в себе состояние
type Process struct {
	state State
}

func (p *Process) setState(state State) {
	p.state = state
}

func main() {
	user := &User{}
	constructor := &Constructor{}
	process := &Process{user}
	err := process.state.SaveDraft()
	if err != nil {
		fmt.Println(err)
	}
	err = process.state.BuildPage()
	if err != nil {
		fmt.Println(err)
	}
	err = process.state.AddPage()
	if err != nil {
		fmt.Println(err)
	}

	// Меняем состояние процесса
	process.setState(constructor)
	err = process.state.AddPage()
	if err != nil {
		fmt.Println(err)
	}
}
